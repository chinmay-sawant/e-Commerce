# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    name: Build Project

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        # Point to the pom.xml inside the CustomerService folder
        run: mvn -B package -DskipTests --file CustomerService/pom.xml

      # Upload the build artifacts (the target directory, which will be inside CustomerService)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: CustomerService-target-directory # Give the artifact a unique name
          # Point to the target directory inside the CustomerService folder
          path: CustomerService/target/

  test:
    name: Run Tests
    # This job depends on the 'build' job, so it will run after 'build' completes successfully
    needs: build

    runs-on: ubuntu-latest

    steps:
      # Checkout is needed to get the project structure and workflow files
      - uses: actions/checkout@v4

      # Download the build artifact (the target directory) from the 'build' job
      # Download path should match the upload path structure
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: CustomerService-target-directory # Name of the artifact to download
          path: CustomerService/target/ # Path to download the artifact to - crucial to match the original location

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Run Tests with Maven
        # Execute the test phase using the artifacts from the build job
        # Activate the Maven profile named 'test'
        # Add the env block to pass GitHub Secrets as environment variables
        run: mvn -B test -Dspring.profiles.active=test --file CustomerService/pom.xml
        env: # <--- Add this env block
          # Map environment variables to standard Spring Security property names
          SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${{ secrets.OKTA_OAUTH2_ISSUER }}
          SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_AUDIENCE: ${{ secrets.OKTA_OAUTH2_AUDIENCE }}
          # If you need client ID/Secret in your app, map them to different property names
          OKTA_OAUTH2_CLIENT_ID: ${{ secrets.OKTA_OAUTH2_CLIENT_ID }}
          OKTA_OAUTH2_CLIENT_SECRET: ${{ secrets.OKTA_OAUTH2_CLIENT_SECRET }}
          # Add any other secrets your tests need here if necessary
