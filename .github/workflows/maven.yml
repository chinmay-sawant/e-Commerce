# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy privacy, and support
# documentation.

name: Java CI with Maven - Separate Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build: # Job 1: Build the project
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      # Updated command to specify the pom.xml location within the ecom folder
      run: mvn -B clean package --file ecom/pom.xml

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: package-artifact
        path: ecom/target/  # Adjust this path to where your built artifact (JAR/WAR) and test results are located

  test: # Job 2: Test the project
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully

    steps:
    - uses: actions/checkout@v4
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: package-artifact
        path: ecom/target/ # Download the artifact to a location the test job can access

    - name: Set up JDK 17
      # Set up JDK again for the test job
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven # Cache Maven dependencies

    - name: Run Maven Tests
      # The Surefire/Failsafe plugins handle running tests based on naming conventions or configurations.
      # To run tests, you typically just execute the test phase.
      # If you need to run specific tests, you would configure the surefire/failsafe plugin
      # in your pom.xml or pass system properties via the mvn command.
      # Example to run a specific test class (requires surefire/failsafe plugin configuration):
      # run: mvn -B test -Dtest=YourTestClassName --file ecom/pom.xml
      # Example to run a specific test method (requires surefire/failsafe plugin configuration):
      # run: mvn -B test -Dtest=YourTestClassName#yourTestMethodName --file ecom/pom.xml
      # Standard command to run all tests:
      run: mvn -B test --file ecom/pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # You might want to run this in the build job instead, as it's more related to dependencies used for building.
    # - name: Update dependency graph
    #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
